
#1 sum of 2 numbers
// function sumOfTwoNumbers(a, b){ 
// const add=a+b;
// console.log(add);
// } 
// sumOfTwoNumbers(2,3);

//2 Write a JavaScript program to find the maximum number in an array. 
// const array = [1, 2, 7, 4];
// console.log(largeNumber(array));

// function largeNumber(array) {
//     return Math.max(...array);
// }

function maximumarray(arr) {
    let max = arr[0]; // Assume the first element is the maximum
    for (let i = 1; i < arr.length; i++) {
        if (arr[i] > max) {
            max = arr[i]; // Update max if we find a larger element
        }
    }
    console.log("Maximum element:", max);
}

const array = [1, 8, 3, 4, 9, 6, 7];
maximumarray(array);
**
//3  Write a JavaScript function to check if a given string is //a palindrome (reads the same forwards and backwards).
// split('') method is used to convert a string into an array of characters.

//split('') str into array abc to  ['a','b','c']
//.join('') -  array into a string ['a','b','c'] to abc


// function checkPalindrome(parameter) {
//     if (parameter.split('').reverse().join('') === parameter) {
//         console.log("Palindrome");
//     } else {
//         console.log("Not Palindrome");
//     }
// }

// checkPalindrome('gajendra');

// #5. Write a JavaScript function that takes an array of numbers and returns a new array with only the even numbers. const array = [1, 2, 7, 4];

// const array = [1, 2, 7, 4];
// function evenNumber(array){
//     const evennum=array.filter((data)=>{
//     return data%2==0;
//     });
    
//     console.log(evennum);

// }
// evenNumber(array);

--example-  for loop

console.log("Welcome to Programiz!");

const data = [
  { id: 1, name: 'gajendra' },
  { id: 2, name: 'akshay' }
];

// Call getvalue function after the for loop
  for (const d of data) {
    getvalue(d);
  }

function getvalue(d) {
    
  console.log("outside the loop", d.id,d.name);
}


##fabionacci series

function generateFibonacci(n) {
  let fibonacciSeries = [0, 1];

  for (let i = 2; i < n; i++) {
    fibonacciSeries[i] = fibonacciSeries[i - 1] + fibonacciSeries[i - 2];
  }

  return fibonacciSeries;
}

// Example: Generate the first 10 Fibonacci numbers
const result = generateFibonacci(10);
console.log(result); // Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]


// Online Javascript Editor for free
// Write, Edit and Run your Javascript code using JS Online Compiler

function convertfunction(str){

 let split_str=str.split(' ');
 console.log(split_str);

split_str.map((data)=>{
  const upppercasedata=data.charAt(0).toUpperCase() + data.slice(1);
  console.log(upppercasedata);

})

}

convertfunction("hello guys");



// Write a function that takes an array of objects and a key, and returns a new array sorted based on the values of that key in ascending order. 

function sorting(arrayOfObjects, key) {
    return arrayOfObjects.sort((a, b) => {
//its will check like if the value is negative definaitly this value is smaller that anotehr value-22-25 = -3 so 22 is smaller that 25
        return a[key] - b[key];
    });
}

const arrayOfObjects = [
    { name: 'John', age: 25 },
    { name: 'Jane', age: 30 },
    { name: 'Bob', age: 22 },
];

const sortedArray = sorting(arrayOfObjects, 'age');
console.log(sortedArray);


//find unique string(and also integer) from array 
//loop ke andar aur ek loop lagayo

function findUniqueString(arr) {
   for (let i = 0; i < arr.length; i++) {
      let unique = true;
      for (let j = 0; j < arr.length; j++) {
         if (i !== j && arr[i] === arr[j]) {
            unique = false;
            break;
         }
      }
      if (unique) {
         return arr[i];
      }
   }
   return null; // If no unique string is found
}

// Example usage
const strings = ["apple", "banana", "apple", "banana", "orange"];
const uniqueString = findUniqueString(strings);
console.log(uniqueString);


3.Given an array of numbers, write a function to find the largest and smallest numbers in the array.

//0 is the first larget number 6>0 -- maxnumber-6  8>6 maxnumber - 8

function largestNumber(array) {
    
   let  maxnumber= array[0];
   
  for(i=1;i<array.length;i++){
    
    if(array[i]>maxnumber) {
        maxnumber=array[i]
    } 
  } 
    console.log(maxnumber);
}

const array = [3, 5, 2, 8];
largestNumber(array);


//sortfor accending order
// sort() method indeed takes a comparison function with two parameters;

const numbers = [5, 2, 8, 1, 4];

// Sorting in ascending order
numbers.sort(function(a, b) {
    return a - b;
});

console.log(numbers); 



## Write a function that returns the sum of all numbers in an array. 

//i index define karata hai 
function sumArray(arr) {
    let sum = 0;

    // Loop through each element in the array unsing index [0,1,2,3,4]
    for (let i = 0; i < arr.length; i++) {
        
        console.log(i);
        // Add the current element to the sum
       // arr[i] means - kiss index ki value hai wo define karata hai
        sum += arr[i];
    }

    return sum;
}

// Example usage
const numbers = [1, 2, 9, 4, 5];
const result = sumArray(numbers);


//using reduce functon works

let a=[1,2,3,4]

let a2=a.reduce(a,b)=>{
return a+b;
}

o/p- 10




// when we use reduce

const numbers = [1, 2, 3, 4, 5];

const sum = numbers.reduce((accumulator, currentValue) => {
  console.log(`accumulator: ${accumulator}, currentValue: ${currentValue}`);
  return accumulator + currentValue;
}, 0);

console.log(sum);

o/p- accumulator: 0, currentValue: 1
accumulator: 1, currentValue: 2
accumulator: 3, currentValue: 3
accumulator: 6, currentValue: 4
accumulator: 10, currentValue: 5
15

#another example of :

const numbers = [1, 2, 3, 4, 5];
const evenSquares = numbers.reduce((accumulator, currentValue) => {
  if (currentValue % 2 === 0) {
    accumulator.push(currentValue * currentValue);
  }
  return accumulator;
}, []);
console.log(evenSquares); // Output: [4, 16]

//Use sort when your primary goal is to order elements in the array.
//Use reduce when you need to perform an aggregation or transformation operation on the array elements.



## second largest number in the array

// Online Javascript Editor for free
// Write, Edit and Run your Javascript code using JS Online Compiler

function arrayofstringfun(arrayofstringvalue){
    
const sortarray=arrayofstringvalue.sort((a,b)=>{
    return a-b
})

console.log(sortarray[3])

    
}

const arrayofstring=[2,3,5,1,8];
arrayofstringfun(arrayofstring);



##1 what is the callback function and how we can use it

function modifyfun(arr, fn) {
    arr.push(9);
    console.log(arr);
    fn();
}

var myarray = [3, 4, 5, 7, 8];
modifyfun(myarray, function() {
    console.log("hello");
    // Your function logic goes here
});


##2 how to reverse the string content without using reverse function

function reverse(str){
    const str2=str.split('');
       let reversedStr = '';
   for (let i = str2.length - 1; i >= 0; i--) {
        reversedStr += str2[i];
        console.log(str2[i]);
    }
    
    
}

let str="Hello World";
reverse(str);

##3 how to check the number is decimal or not

function checknumber(num){
    
    return num%1===0;
}
console.log(checknumber(12));


##4-q11 given two string returns true if they are anagrams of one another -
like (Mary) is the anagrams  of (Army)

//donhi string accending order madhe laun takayache

function anagramfunction(firstword,secondword){
    
   var a= firstword.split("").sort().join("");
 var b= secondword.split("").sort().join("");
      console.log(a);
       console.log(b);
    if(a===b){
        console.log("true");
    }
    else{
        console.log("false");
    }
}

var firstword="mary";
var secondword="army"


1)Question: Write a function that finds the longest word in a sentence.

0 = Hello   1= Gajendra 

function findLongestWord(sentence) {
  const words = sentence.split(' ');
  let longestWord = '';

  for (let i = 0; i < words.length; i++) {
    if (words[i].length > longestWord.length) {
      longestWord = words[i];
    }
  }

  return longestWord;
}

console.log(findLongestWord('Hello Gajendra'));


## Write a function that accepts a number and returns its factorial (e.g., factorial of 5 is 5 x 4 x 3 x 2 x 1). 

function factorial(num){
    let updated=1;
    for(let i=num;i>=1;i--){
    updated=updated * i;
    }
            console.log(updated);
}

factorial(4);


o/p - 24


##What is the best way to find the first non-repeated character in a String?

// Online Javascript Editor for free
// Write, Edit and Run your Javascript code using JS Online Compiler
 
function non_repeate_character(str){
 
    let strcopy=str.split("");
    let repeated = false;
    for(let i=0;i<strcopy.length;i++){
      repeated=false;
      for(let j=0;j<strcopy.length;j++){
          
          if(i != j && strcopy[i]===strcopy[j] ){
                repeated=true;
                break;
          }
      }
     
     if(!repeated){
         console.log(strcopy[i]);
     }
    }
    
}

non_repeate_character("hello");

o/p - 
h
e
o


// swap numbers 

function swap(arr) {
    for (let i = 0; i < arr.length; i++) {
        for (let j = i + 1; j < arr.length; j++) {
            if (arr[i] > arr[j]) {
                // Swap arr[i] and arr[j]
                let temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
    return arr;
}

const array = [2, 6, 7, 3, 1];
console.log(swap(array)); // Output: [1, 2, 3, 6, 7]



## next step is to try and build an npm package and try to publish it

*************************





1) 

// Input

// [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ] ]

// Output

// flatternarray [ 1, 2, 3, 4, 5, 6 ]


console.log("Try programiz.pro");

function reducer(arr){
    
    console.log(arr);
    
    const arr2=[];
    
    // initial value would be empty array
    const flatternarray=arr.reduce((initial,current)=>initial.concat(current));
    
    console.log("flatternarray",flatternarray);
    
    
}

let arr=[[1,2],[3,4],[5,6]];

reducer(arr);


2) largest even number in a array .

const array=[4,5,7,8,9,11,12,17,97,47];


function largestPrimeNumber(array) {
    
    let  maxnumber= array[0];
    
    for (let i = 0; i < array.length; i++) {
        if (array[i] % 2 == 0) {
            
            if(array[i]>maxnumber){
                maxnumber=array[i];
                
            }
            
        }
    }
    console.log("maxnumber",maxnumber);
}

const array = [4, 5, 7, 8, 9, 11, 12, 17, 97, 47];

largestPrimeNumber(array);



// duplicate string 

let strArray2 = [];

for (let i = 0; i < strArray.length; i++) {
    console.log("strArray[i]", strArray[i]);

    let isUnique = true;
    for (let j = 0; j < strArray.length; j++) {
        if (i != j && strArray[i] == strArray[j]) {
            isUnique = false;
            break;
        }
    }

    if (isUnique) {
        strArray2.push(strArray[i]);
    }

    console.log("strArray2", strArray2);
}

	
5) javascript coding challenge

const intArray = [1,2,3];

intArray[500] = 500;

console.log(intArray.length);


// o/p - 501 - because it will add 1,2,3,from 3 to 500set as empty array,500


6)  print 7 alpha numeric randum number


function generateRandum(){
    
    const chars = "123456789abcdefghijklmnopqrstuvwxyz";
    
    let strLength = 7;
    
    let result = '';
    
    for(i=0;i<strLength;i++){
        
        // Math.random() generate the number  between 0 to 1
        // 0 and 1 ke beech me value ayegi lekin 1 nahi ayegi Math.floor karege 
        // 1 to 35 ke beech me randum value ayegi
        // 0.7689 * 35 = 26.9115
        let randNum =  Math.floor(Math.random() * chars.length);
        // 5 , 21 ,29,22,27,31,,32
        
        result +=chars.substring(randNum, randNum+1)
        
        console.log(result);


        console.log(randNum);
        
    }
    
}

generateRandum();

0/p  - node /tmp/2lKV7V7Ogg.js
j
18
j7
6
j7l
20
j7lm
21
j7lm7
6
j7lm7e
13
j7lm7eo
23

7) find last element of an array without using length . 

arr[3]

const arr = ['white','red','black','yellow']

##

** Note - 

another way at() method takes an integer value and return element

arr.at(3);

arr.at(-1);  // it will return last index   // yellow



8) find the out put of below code


function print(x){

if(x<=1){

print(x+1);
 
}else if (x>=1000000000000) {

console.log(" x in else block is"+x);

}
print(x+1);
}


print(0);


0/p - uncaught range error will be shown maxium call stack size excessed


resone -
1) base case - once a condtion is met , the function stops calling itself .

2) recursive function : A function that calls itself infinite loop

The javascript exception "too much recursion" or "Maximum call stack size exceeded"
occurs when there are too many function calls or for a recursive fuction.




15) split array item into individual words 

const array1 = ["I want to become", "a profectional developer", "developer"] 

expected output - ['I', 'want', 'to', 'become', 'a', 'profectional', 'developer', 'developer'] 


// Online Javascript Editor for free
// Write, Edit and Run your Javascript code using JS Online Compiler


// 15) split array item into individual words 

// const array1 = ["I want to become", "a profectional developer", "developer"] 

// expected output - ['I', 'want', 'to', 'become', 'a', 'profectional', 'developer'] 


function demo(array1){

    let text = array1.join();
    
    let result = text.replace(/,/, '');
  let result2 =  result.split(" ");
console.log(result2);
    
    // console.log(text);
    
    
}

const array1 = ["I want to become", "a profectional developer"]

demo(array1);



20) 

function demofunction(array1){
    //the flat function can be used to concatenate the two arrays into one.
    const result = array1.map(x=>x.split(" ")).flat();
    // o/p result [
//   [ 'I', 'want', 'to', 'become' ],
//   [ 'a', 'professional', 'frountend' ],
//   [ 'developer' ]
// ]
    console.log("result",result);
    
//     result [
//   'I',
//   'want',
//   'to',
//   'become',
//   'a',
//   'professional',
//   'frountend',
//   'developer'
// ]
    
}


const array1 = ["I want to become","a professional frountend","developer"]; demofunction(array1);





tabs=[{
label:"value1",
component:""
}]

fields:{
heading:"Find member",
field:[{
label:"Last Name",
type:"text"

}]
}



















